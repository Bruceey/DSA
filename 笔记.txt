1. Vector的希尔排序没写

2. List的基数排序没写

3. 访问数组下标可以越界，但值是乱值

4. while (n--)   =>    循环体执行n次
   while (--n)   =>    循环体执行n-1次

5. T& Vector<T>::operator[](Rank r) const   不能对对象属性操作，但可以操作对象的容器属性里面的值

6. 若函数的返回值为引用(&)，则编译器就不为返回值创建临时变量了。直接返回那个变量的引用。所以千万不要返回临时变量的引用，如下：

   int & function()
   {
       int b = 10;
       return b;//不OK 等函数返回后，b就消失了，引用了一个消失的东西
                //程序会懵逼的。指针也一样。
   }


7. 有序查找的算法都是返回不大于e的最后一个，故插入时需要位置+1

8. 模板类继承后访问基类成员要利用this指针

9. insertAsLC(const T &e) 和 insertAsLC(T const& e) 相同

10. 成员函数实现时调用类外函数，类外函数要写在其上方。

11.疑惑：BinTree的attach函数的参数S可以访问保护成员？？？？？
*************重点之奇葩之处：***************
(1) `对象的指针`和`对象本身`不可访问其私有、保护成员
(2) 但`另一个对象的指针`或`另一个对象本身`出现在类成员函数的定义中，便可以访问
如下例：
class Base {
private:
    int size;
protected:
    double num;
public:
    Base(int s=0, double n=1) : size(s), num(n) {}

    void func1(Base* B) {
        cout << "在Base类的func1函数中利用另一个对象的指针访问其私有、保护成员" << B->size << " " << B->num << endl;
    }

    void func2(Base B) {
        cout << "在Base类的func2函数中利用另一个对象本身访问其私有、保护成员" << B.size << " " << B.num << endl;
    }
};

Base b0(1, 2);
Base* b0_p = &b0;
Base b1(3, 4);
b1.func1(b0_p); //可以通过b0的指针访问其私有、保护成员
b1.func2(b0);   //可以通过b0对象本身访问其私有、保护成员
b0_p->size, b0_p->num; //均不可访问
b0.size, b0.num; //均不可访问

12.以下语句可以随便写多次，不算重复定义
using Rank = int;
using Rank = int;
typedef int Rank;
typedef int Rank;

13.<<**********C++中的局部变量和全局变量重名时取值问题**********>>
   (1)局部变量在使用时会屏蔽全局变量。要用全局变量，需要使用"::"．
   (2)局部变量可以与全局变量同名，在函数内引用这个变量时，会用到同名的局部变量，而不会用到全局变量。对于有些编译器而言，在同一个函数内可以定义多个同名的局部变量，比如在两个循环体内都定义一个同名的局部变量，而那个局部变量的作用域就在那个循环体内。

#include<iostream>
using namespace std;
void test();
int i = 1;
int main()
{
   int i = 2;

   cout<<"global i = "<<::i<<"   "<<"address = "<<&::i<<endl;
   cout<<"main() i = "<<i<<"   "<<"address = "<<&i<<endl;

   test();

   {
       cout<<"main() i = "<<i<<"   "<<"address = "<<&i<<endl;
       int i = 3;
       cout<<"local i = "<<i<<"   "<<"address = "<<&i<<endl;
   }
}
void test()
{
   int i = 4;
   cout<<"test() i = "<<i<<"   "<<"address = "<<&i<<endl;
   cout<<"global i = "<<::i<<"   "<<"address = "<<&::i<<endl;
}

14.在一般的函数前面加上static,作用是：
   加了static后表示该函数失去了全局可见性，只在该函数所在的文件作用域内可见
   当函数声明为static以后,编译器在该目标编译单元内只含有该函数的入口地址,没有函数名,其它编译单元便不能通过该函数名来调用该函数

   在类的成员函数前面加上static标志符：
   成员函数是属于类的，而非对象的，也就是所有该类的对象共同拥有这一个成员函数，而不是普通的每个对象各自拥有一个成员函数
注意：编译单元通常理解为cpp文件，故.h随便引用也可以调用static函数

15.模板类继承模板基类，访问基类成员必须用this访问；注意模板基类中定义的宏，宏里有基类属性时加上this，这样派生模板类才能访问

16.C++函数可以返回一个类对象，首先程序会在外部创建一个无名临时对象，然后将函数内部创建的类对象通过复制构造函数复制到这个临时对象

17. 派生类对象的构造函数会先自动调用基类的默认构造函数，从而构建基类对象。
class Base{
public:
    Base(int c=10){cout<< "基类带参构造函数" << c << endl;}
    ~Base(){cout<<"基类析构" << endl;}
};
class Derived:public Base{
public:
    Derived(int c) // 调用基类构造函数
    {
        cout<< "派生类带参构造函数" << c << endl;
    }
    ~Derived(){cout<<"派生类析构" << endl;}
};

int main()
{
    int i = 9;
    Derived d1(i);

    return 0;
}
运行结果如下：
基类带参构造函数10
派生类带参构造函数9
派生类析构
基类析构